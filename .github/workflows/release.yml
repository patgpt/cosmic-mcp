name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run tests
        run: bun test

      - name: Build project
        run: bun run build

      - name: Setup Node.js for npm
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Determine version bump
        id: version
        run: |
          # Get the latest commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"

          # Determine version bump type based on commit message
          if [[ $COMMIT_MSG =~ ^feat(\(.+\))?!: ]] || [[ $COMMIT_MSG =~ BREAKING\ CHANGE ]]; then
            echo "bump=major" >> $GITHUB_OUTPUT
            echo "Version bump: major"
          elif [[ $COMMIT_MSG =~ ^feat(\(.+\))?: ]]; then
            echo "bump=minor" >> $GITHUB_OUTPUT
            echo "Version bump: minor"
          elif [[ $COMMIT_MSG =~ ^fix(\(.+\))?: ]] || [[ $COMMIT_MSG =~ ^perf(\(.+\))?: ]]; then
            echo "bump=patch" >> $GITHUB_OUTPUT
            echo "Version bump: patch"
          else
            echo "bump=none" >> $GITHUB_OUTPUT
            echo "No version bump needed"
          fi

      - name: Bump version
        if: steps.version.outputs.bump != 'none'
        run: |
          npm version ${{ steps.version.outputs.bump }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update changelog
        if: steps.version.outputs.bump != 'none'
        run: |
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s" --reverse)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --reverse)
          fi

          # Create new changelog entry
          DATE=$(date +%Y-%m-%d)

          # Create temporary file with new entry
          echo "## [${NEW_VERSION}] - ${DATE}" > temp_changelog.md
          echo "" >> temp_changelog.md
          echo "${COMMITS}" >> temp_changelog.md
          echo "" >> temp_changelog.md

          # Insert new entry after the header
          head -n 4 CHANGELOG.md > new_changelog.md
          cat temp_changelog.md >> new_changelog.md
          tail -n +5 CHANGELOG.md >> new_changelog.md
          mv new_changelog.md CHANGELOG.md
          rm temp_changelog.md

      - name: Commit version bump
        if: steps.version.outputs.bump != 'none'
        run: |
          git add package.json CHANGELOG.md
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git tag "v$NEW_VERSION"
          git push origin main --tags

      - name: Create GitHub Release
        if: steps.version.outputs.bump != 'none'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          body: |
            ## Changes in v${{ env.NEW_VERSION }}

            See [CHANGELOG.md](https://github.com/patgpt/cosmic-mcp/blob/main/CHANGELOG.md) for detailed changes.

            ## Installation

            ```bash
            npm install -g cosmic-mcp@${{ env.NEW_VERSION }}
            ```

            Or use with npx:
            ```bash
            npx cosmic-mcp@${{ env.NEW_VERSION }}
            ```
          draft: false
          prerelease: false

      - name: Publish to npm
        if: steps.version.outputs.bump != 'none'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update documentation
        if: steps.version.outputs.bump != 'none'
        run: |
          # Update README badges with new version
          sed -i.bak "s/cosmic-mcp@[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*/cosmic-mcp@$NEW_VERSION/g" README.md
          rm README.md.bak

          # Commit documentation updates
          git add README.md
          git commit -m "docs: update version references to $NEW_VERSION [skip ci]" || true
          git push origin main || true
